0 day Exploit Development 
--------------------------

General Intro : 
---------------

On average, a new "in the wild" exploit is discovered every 17 days (but in practice these often clump together in exploit chains that are all discovered on the same date);
Across all vendors, it takes 15 days on average to patch a vulnerability that is being used in active attacks;
A detailed technical analysis on the root-cause of the vulnerability is published for 86% of listed CVEs;
Memory corruption issues are the root-cause of 68% of listed CVEs.

Memory Corruption : 
--------------------
Violating Memory Safety

4 main types of memory corruption bugs :  

1. Using uninitialized memory
2. Using non-owned memory 
3. Memory overflow 
4. Faulty Heap Memory Management 


Top prevention security controls : 

levels : 
1. Compile Time 
2. OS Level 
3. Exploit Protection



1. Dangerous standard library functions and safer alternatives
2. ASCII armored addresses
3. Stack protection
4. Address Space Layout Randomization (ASLR)
5. Position-independent Executable (PIE)
6. NX bit
7. Control-flow Integrity (CFI)
8. Static code analysis


Most Dangerous Memory Corruption Bugs : 

1. Use After Free 
2. Heap Corruption 
3. Stack Corruption
4. Type Confusion 

Qualities of a well-developed reliable Exploit : 

1. Does the exploit ever crash? 
2. Does the exploit ever bail out cleanly? 
3. Does the exploit work uniformly across an exhaustive test matrix of different patch levels?
4. Does the exploit work in the presence of additional security software such as EMET, Grsecurity, Anti-Virus products, etc.?
5. How is the exploit likely to behave upon encountering an unusual environment? Will it succeed, crash or abort?
6. Is the exploit cross-platform and cross-version?
7. Does the exploit have a robust “continuation of execution” story, i.e. no post-exploitation instability or other untoward effects?

Basic Requirements for Successful Learning
------------------------------------------
1. C / C++ programming experience 
2. IDA Pro 
3. Basic Reverse Engineering 
4. Scripting  - python, ruby, perl 
5. Intermediate TCP/IP 
6. Linux / Windows Internals 
7. Experience with BOF, ROP/JOP, ASLR, SafeSEH, Canaries/Security cookies, DEP etc. 
